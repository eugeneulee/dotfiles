# Simple control file that loads additional modules as needed.
#
# To enable modules, place them in ~/dotfiles/zsh/modules-available/
# directory and symlink them into ~/dotfiles/zsh/modules-enabled/

set bell-style visible

# Load all enabled modules
for file in ./dotfiles/zsh/modules/*; do
  source $file
done

SAVEHIST=500
HISTFILE=~/.zsh_history

# Colorize the ls output https://geoff.greer.fm/lscolors/
export LSCOLORS="gxfxcxdxbxegedabagacad"

# AWS
export AWS_PROFILE=elee

# Java
export MAVEN_OPTS="-Xmx1024m"
export HEAP="-Xms2g -Xmx2g -XX:MaxMetaspaceSize=1024m"
export JAVA_HOME="$HOME/.sdkman/candidates/java/current/jre"
export ANDROID_HOME="$HOME/Library/Android/sdk"
export ANDROID_SDK="$HOME/Library/Android/sdk"

export LDFLAGS="-L/usr/local/opt/ncurses/lib -L/usr/local/opt/icu4c/lib"
export CPPFLAGS="-I/usr/local/opt/ncurses/include -I/usr/local/opt/icu4c/include"

# Go
export GOPATH="$HOME/go"

export PATH="$PATH:/usr/local/opt/ncurses/bin"
export PATH="$PATH:/opt/homebrew/Cellar/python@3.11/3.11.4"
export PATH="$PATH:$ANDROID_HOME/emulator:$ANDROID_HOME/platform-tools:$ANDROID_HOME/tools"
export PATH="$PATH:$JAVA_HOME/bin"
export PATH="$PATH:./node_modules/.bin"
export PATH="/usr/local/opt:$PATH"
export PATH="$PATH:$GOPATH/bin"
export NVM_DIR="$HOME/.nvm"
export PATH="$PATH:~/src/icd/devscripts"

# Ruby
#eval "$(rbenv init - zsh)"

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup=`$("$HOME/opt/anaconda3/bin/conda" 'shell.zsh' 'hook' 2> /dev/null)`
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "$HOME/opt/anaconda3/etc/profile.d/conda.sh" ]; then
        . "$HOME/opt/anaconda3/etc/profile.d/conda.sh"
    else
        export PATH="$HOME/opt/anaconda3/bin:$PATH"
    fi
fi
unset __conda_setup

# <<< conda initialize <<<
export PATH="/usr/local/opt/openssl@3/bin:$PATH"

# JEnv
export PATH="$HOME/.jenv/bin:$PATH"
#eval "$(jenv init -)"

# Node
export NVM_DIR="$HOME/.nvm"
[ -s "/opt/homebrew/opt/nvm/nvm.sh" ] && . "/opt/homebrew/opt/nvm/nvm.sh"  # This loads nvm
[ -s "/opt/homebrew/opt/nvm/etc/bash_completion" ] && . "/opt/homebrew/opt/nvm/etc/bash_completion"  # This loads nvm bash_completion
[[ -s /Users/$USER/.nvm/nvm.sh ]] && . /Users/$USER/.nvm/nvm.sh

# Auto-switch node versions if .nvmrc is present
autoload -U add-zsh-hook
load-nvmrc() {
  local node_version="$(nvm version)"
  local nvmrc_path="$(nvm_find_nvmrc)"

  if [ -n "$nvmrc_path" ]; then
    local nvmrc_node_version=$(nvm version "$(cat "${nvmrc_path}")")

    if [ "$nvmrc_node_version" = "N/A" ]; then
      nvm install
    elif [ "$nvmrc_node_version" != "$node_version" ]; then
      nvm use
    fi
  elif [ "$node_version" != "$(nvm version default)" ]; then
    echo "Reverting to nvm default version"
    nvm use default
  fi
}
add-zsh-hook chpwd load-nvmrc
load-nvmrc

eval "$(/opt/homebrew/bin/brew shellenv)"

#THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
export SDKMAN_DIR="$HOME/.sdkman"
[[ -s "$HOME/.sdkman/bin/sdkman-init.sh" ]] && source "$HOME/.sdkman/bin/sdkman-init.sh"
